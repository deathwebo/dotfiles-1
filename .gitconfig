[config]

    # default editor should always be vim
    editor = vim

[alias]

    # List commits in short form, with colors and branch/tag annotations. 
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

    # Graph commits, abbreviated IDS, dates relative to now, with commit refernce, colors, author of commit
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    # View the current working tree status using the short format
    s = status -s

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

[merge]

    # Include summaries of merged commits in newly created merge commit messages
    log = true

[diff]

    # Detect copies as well as renames
    renames = copies

[color]

    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

[color "branch"]

    current = yellow reverse
    local = yellow
    remote = green

[color "status"]

    added = yellow
    changed = green
    untracked = cyan

[color "diff"]

    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions
